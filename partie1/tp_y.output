Grammar

    0 $accept: programme $end

    1 programme: declLOpt Begin expr End

    2 declLOpt: %empty
    3         | declLOpt decl

    4 decl: ID AFFECT expr ';'

    5 expr: If bexpr Then expr Else expr
    6     | expr ADD expr
    7     | expr SUB expr
    8     | expr MUL expr
    9     | expr DIV expr
   10     | ADD expr
   11     | SUB expr
   12     | CST
   13     | ID
   14     | '(' expr ')'

   15 bexpr: expr RELOP expr
   16      | '(' bexpr ')'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 14 16
')' (41) 14 16
';' (59) 4
error (256)
If (258) 5
Then (259) 5
Else (260) 5
Begin (261) 1
End (262) 1
ADD (263) 6 10
SUB (264) 7 11
MUL (265) 8
DIV (266) 9
AFFECT (267) 4
ID (268) 4 13
CST (269) 12
RELOP (270) 15
unary (271)


Nonterminals, with rules where they appear

$accept (20)
    on left: 0
programme (21)
    on left: 1, on right: 0
declLOpt (22)
    on left: 2 3, on right: 1 3
decl (23)
    on left: 4, on right: 3
expr (24)
    on left: 5 6 7 8 9 10 11 12 13 14, on right: 1 4 5 6 7 8 9 10 11
    14 15
bexpr (25)
    on left: 15 16, on right: 5 16


State 0

    0 $accept: . programme $end

    $default  reduce using rule 2 (declLOpt)

    programme  go to state 1
    declLOpt   go to state 2


State 1

    0 $accept: programme . $end

    $end  shift, and go to state 3


State 2

    1 programme: declLOpt . Begin expr End
    3 declLOpt: declLOpt . decl

    Begin  shift, and go to state 4
    ID     shift, and go to state 5

    decl  go to state 6


State 3

    0 $accept: programme $end .

    $default  accept


State 4

    1 programme: declLOpt Begin . expr End

    If   shift, and go to state 7
    ADD  shift, and go to state 8
    SUB  shift, and go to state 9
    ID   shift, and go to state 10
    CST  shift, and go to state 11
    '('  shift, and go to state 12

    expr  go to state 13


State 5

    4 decl: ID . AFFECT expr ';'

    AFFECT  shift, and go to state 14


State 6

    3 declLOpt: declLOpt decl .

    $default  reduce using rule 3 (declLOpt)


State 7

    5 expr: If . bexpr Then expr Else expr

    If   shift, and go to state 7
    ADD  shift, and go to state 8
    SUB  shift, and go to state 9
    ID   shift, and go to state 10
    CST  shift, and go to state 11
    '('  shift, and go to state 15

    expr   go to state 16
    bexpr  go to state 17


State 8

   10 expr: ADD . expr

    If   shift, and go to state 7
    ADD  shift, and go to state 8
    SUB  shift, and go to state 9
    ID   shift, and go to state 10
    CST  shift, and go to state 11
    '('  shift, and go to state 12

    expr  go to state 18


State 9

   11 expr: SUB . expr

    If   shift, and go to state 7
    ADD  shift, and go to state 8
    SUB  shift, and go to state 9
    ID   shift, and go to state 10
    CST  shift, and go to state 11
    '('  shift, and go to state 12

    expr  go to state 19


State 10

   13 expr: ID .

    $default  reduce using rule 13 (expr)


State 11

   12 expr: CST .

    $default  reduce using rule 12 (expr)


State 12

   14 expr: '(' . expr ')'

    If   shift, and go to state 7
    ADD  shift, and go to state 8
    SUB  shift, and go to state 9
    ID   shift, and go to state 10
    CST  shift, and go to state 11
    '('  shift, and go to state 12

    expr  go to state 20


State 13

    1 programme: declLOpt Begin expr . End
    6 expr: expr . ADD expr
    7     | expr . SUB expr
    8     | expr . MUL expr
    9     | expr . DIV expr

    End  shift, and go to state 21
    ADD  shift, and go to state 22
    SUB  shift, and go to state 23
    MUL  shift, and go to state 24
    DIV  shift, and go to state 25


State 14

    4 decl: ID AFFECT . expr ';'

    If   shift, and go to state 7
    ADD  shift, and go to state 8
    SUB  shift, and go to state 9
    ID   shift, and go to state 10
    CST  shift, and go to state 11
    '('  shift, and go to state 12

    expr  go to state 26


State 15

   14 expr: '(' . expr ')'
   16 bexpr: '(' . bexpr ')'

    If   shift, and go to state 7
    ADD  shift, and go to state 8
    SUB  shift, and go to state 9
    ID   shift, and go to state 10
    CST  shift, and go to state 11
    '('  shift, and go to state 15

    expr   go to state 27
    bexpr  go to state 28


State 16

    6 expr: expr . ADD expr
    7     | expr . SUB expr
    8     | expr . MUL expr
    9     | expr . DIV expr
   15 bexpr: expr . RELOP expr

    ADD    shift, and go to state 22
    SUB    shift, and go to state 23
    MUL    shift, and go to state 24
    DIV    shift, and go to state 25
    RELOP  shift, and go to state 29


State 17

    5 expr: If bexpr . Then expr Else expr

    Then  shift, and go to state 30


State 18

    6 expr: expr . ADD expr
    7     | expr . SUB expr
    8     | expr . MUL expr
    9     | expr . DIV expr
   10     | ADD expr .

    $default  reduce using rule 10 (expr)


State 19

    6 expr: expr . ADD expr
    7     | expr . SUB expr
    8     | expr . MUL expr
    9     | expr . DIV expr
   11     | SUB expr .

    $default  reduce using rule 11 (expr)


State 20

    6 expr: expr . ADD expr
    7     | expr . SUB expr
    8     | expr . MUL expr
    9     | expr . DIV expr
   14     | '(' expr . ')'

    ADD  shift, and go to state 22
    SUB  shift, and go to state 23
    MUL  shift, and go to state 24
    DIV  shift, and go to state 25
    ')'  shift, and go to state 31


State 21

    1 programme: declLOpt Begin expr End .

    $default  reduce using rule 1 (programme)


State 22

    6 expr: expr ADD . expr

    If   shift, and go to state 7
    ADD  shift, and go to state 8
    SUB  shift, and go to state 9
    ID   shift, and go to state 10
    CST  shift, and go to state 11
    '('  shift, and go to state 12

    expr  go to state 32


State 23

    7 expr: expr SUB . expr

    If   shift, and go to state 7
    ADD  shift, and go to state 8
    SUB  shift, and go to state 9
    ID   shift, and go to state 10
    CST  shift, and go to state 11
    '('  shift, and go to state 12

    expr  go to state 33


State 24

    8 expr: expr MUL . expr

    If   shift, and go to state 7
    ADD  shift, and go to state 8
    SUB  shift, and go to state 9
    ID   shift, and go to state 10
    CST  shift, and go to state 11
    '('  shift, and go to state 12

    expr  go to state 34


State 25

    9 expr: expr DIV . expr

    If   shift, and go to state 7
    ADD  shift, and go to state 8
    SUB  shift, and go to state 9
    ID   shift, and go to state 10
    CST  shift, and go to state 11
    '('  shift, and go to state 12

    expr  go to state 35


State 26

    4 decl: ID AFFECT expr . ';'
    6 expr: expr . ADD expr
    7     | expr . SUB expr
    8     | expr . MUL expr
    9     | expr . DIV expr

    ADD  shift, and go to state 22
    SUB  shift, and go to state 23
    MUL  shift, and go to state 24
    DIV  shift, and go to state 25
    ';'  shift, and go to state 36


State 27

    6 expr: expr . ADD expr
    7     | expr . SUB expr
    8     | expr . MUL expr
    9     | expr . DIV expr
   14     | '(' expr . ')'
   15 bexpr: expr . RELOP expr

    ADD    shift, and go to state 22
    SUB    shift, and go to state 23
    MUL    shift, and go to state 24
    DIV    shift, and go to state 25
    RELOP  shift, and go to state 29
    ')'    shift, and go to state 31


State 28

   16 bexpr: '(' bexpr . ')'

    ')'  shift, and go to state 37


State 29

   15 bexpr: expr RELOP . expr

    If   shift, and go to state 7
    ADD  shift, and go to state 8
    SUB  shift, and go to state 9
    ID   shift, and go to state 10
    CST  shift, and go to state 11
    '('  shift, and go to state 12

    expr  go to state 38


State 30

    5 expr: If bexpr Then . expr Else expr

    If   shift, and go to state 7
    ADD  shift, and go to state 8
    SUB  shift, and go to state 9
    ID   shift, and go to state 10
    CST  shift, and go to state 11
    '('  shift, and go to state 12

    expr  go to state 39


State 31

   14 expr: '(' expr ')' .

    $default  reduce using rule 14 (expr)


State 32

    6 expr: expr . ADD expr
    6     | expr ADD expr .
    7     | expr . SUB expr
    8     | expr . MUL expr
    9     | expr . DIV expr

    MUL  shift, and go to state 24
    DIV  shift, and go to state 25

    $default  reduce using rule 6 (expr)


State 33

    6 expr: expr . ADD expr
    7     | expr . SUB expr
    7     | expr SUB expr .
    8     | expr . MUL expr
    9     | expr . DIV expr

    MUL  shift, and go to state 24
    DIV  shift, and go to state 25

    $default  reduce using rule 7 (expr)


State 34

    6 expr: expr . ADD expr
    7     | expr . SUB expr
    8     | expr . MUL expr
    8     | expr MUL expr .
    9     | expr . DIV expr

    $default  reduce using rule 8 (expr)


State 35

    6 expr: expr . ADD expr
    7     | expr . SUB expr
    8     | expr . MUL expr
    9     | expr . DIV expr
    9     | expr DIV expr .

    $default  reduce using rule 9 (expr)


State 36

    4 decl: ID AFFECT expr ';' .

    $default  reduce using rule 4 (decl)


State 37

   16 bexpr: '(' bexpr ')' .

    $default  reduce using rule 16 (bexpr)


State 38

    6 expr: expr . ADD expr
    7     | expr . SUB expr
    8     | expr . MUL expr
    9     | expr . DIV expr
   15 bexpr: expr RELOP expr .

    ADD  shift, and go to state 22
    SUB  shift, and go to state 23
    MUL  shift, and go to state 24
    DIV  shift, and go to state 25

    $default  reduce using rule 15 (bexpr)


State 39

    5 expr: If bexpr Then expr . Else expr
    6     | expr . ADD expr
    7     | expr . SUB expr
    8     | expr . MUL expr
    9     | expr . DIV expr

    Else  shift, and go to state 40
    ADD   shift, and go to state 22
    SUB   shift, and go to state 23
    MUL   shift, and go to state 24
    DIV   shift, and go to state 25


State 40

    5 expr: If bexpr Then expr Else . expr

    If   shift, and go to state 7
    ADD  shift, and go to state 8
    SUB  shift, and go to state 9
    ID   shift, and go to state 10
    CST  shift, and go to state 11
    '('  shift, and go to state 12

    expr  go to state 41


State 41

    5 expr: If bexpr Then expr Else expr .
    6     | expr . ADD expr
    7     | expr . SUB expr
    8     | expr . MUL expr
    9     | expr . DIV expr

    ADD  shift, and go to state 22
    SUB  shift, and go to state 23
    MUL  shift, and go to state 24
    DIV  shift, and go to state 25

    $default  reduce using rule 5 (expr)
